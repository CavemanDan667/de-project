name: Security Checks and Testing

on: 
  push:
    branches-ignore:
      - main

jobs:
  runner-job: 
    name: Security Checks and Testing
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: "mock_tote_db"
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
            python-version: '3.11.1'
      - name: Install dependencies
        run: make requirements
      - name: Install pg8000
        run: pip install pg8000
      - name: Connect to PostgreSQL
        run: python mock_database/seed_github.py
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2
      - name: Run Security Checks
        run: make security-test
      - name: Check Ingestion Coverage
        run: make check-coverage-ingestion
      - name: Ingestion Unit Tests
        run: make test-ingestion
  
  process-tests: 
    name: Process Unit Testing
    runs-on: ubuntu-latest
    needs: runner-job
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: "mock_dw"
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
            python-version: '3.11.1'
      - name: Install dependencies
        run: make requirements
      - name: Install pg8000
        run: pip install pg8000
      - name: Connect to PostgreSQL
        run: python mock_data_warehouse/seed_github.py
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2
      - name: Process Unit Tests
        run: make test-process
      - name: Check Process Coverage
        run: make check-coverage-process
      - name: Loading Unit Tests
        run: make test-loading
      - name: Check Loading Coverage
        run: make-check-coverage-load
      - name: Run Flake8
        run: make run-flake

  check-terraform:
      name: Check Terraform
      runs-on: ubuntu-latest
      needs: process-tests
      steps:
        - name: Checkout Repo
          uses: actions/checkout@v4
        - name: Configure AWS CLI
          uses: aws-actions/configure-aws-credentials@v4
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: eu-west-2
        - name: Setup Terraform
          uses: hashicorp/setup-terraform@v2
        - name: Terraform Init
          working-directory: terraform
          run: terraform init
        - name: Terraform Plan
          working-directory: terraform
          run: terraform plan
          env:
              TF_VAR_EMAIL_1: ${{ secrets.EMAIL_1 }}
              TF_VAR_EMAIL_2: ${{ secrets.EMAIL_2 }}
              TF_VAR_EMAIL_3: ${{ secrets.EMAIL_3 }}
              TF_VAR_EMAIL_4: ${{ secrets.EMAIL_4 }}
              TF_VAR_EMAIL_5: ${{ secrets.EMAIL_5 }}
              TF_VAR_totesys_db_creds: ${{ secrets.TOTESYS_DB_CREDS}}
              TF_VAR_data_warehouse_creds: ${{ secrets.DATA_WAREHOUSE_CREDS}}
              TF_VAR_test_totesys_db_creds: ${{ secrets.TEST_TOTESYS_CREDS}}
              TF_VAR_test_dw_creds: ${{ secrets.TEST_DW_CREDS}}
